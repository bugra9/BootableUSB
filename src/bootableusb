#!/bin/bash

# =================================================================
# BootableUSB v0.5
# 
# @link https://github.com/bugra9/BootableUSB
# @author bugra9 https://github.com/bugra9
# @contributors https://github.com/bugra9/BootableUSB/graphs/contributors
# @license GPLv3 https://github.com/bugra9/BootableUSB/blob/master/LICENSE
# 
# [TR] Bu programın KESİNLİKLE HİÇBİR TEMİNATI YOKTUR
# [EN] This program comes with ABSOLUTELY NO WARRANTY
# =================================================================

# =================================================================
# 					İçindekiler
# 					
# 	1. Ana Fonksiyonlar ........................ 46
# 	1.1. prepare ............................... 50
# 	1.2. format ................................ 72
# 	1.2. formatMBR ............................. 107
# 	1.2. formatGPT ............................. 120
# 	1.2. formatHybrid .......................... 137
# 	1.3. installGrub ........................... 165
# 	1.4. updateGrub ............................ 183
# 	1.5. persistent ............................ 189
# 	1.6. resizePersistent ...................... 202
# 	1.7. extract ............................... 213
# 	1.8. repairGrub ............................ 242
# 	1.9. main .................................. 250
# 	
# 	2. Yardımcı Fonksiyonlar ................... 366
# 	2.1. print ................................. 369
# 	2.3. writeGrubCfg .......................... 410
# 	2.4. mountUSB .............................. 543
# 	2.5. umountUSB ............................. 590
# 	
# 	3. Bilgi Fonksiyonları ..................... 617
# 	3.1. displayHelp ........................... 621
# 	3.2. displayVersion ........................ 631
# 	3.3. displayDevices ........................ 636
# 	
# =================================================================

# =================================================================
# 					Ana Fonksiyonlar
# =================================================================

# (install) Diski biçimlendirip grubu yükler.
function prepare() {
	# Öntanım yapılıyor...
	if [[ $scheme == "hybrid" ]] ; then
		systemType="all"
	elif [[ $scheme == "gpt" ]] ; then
		systemType="uefi"
	fi

	format
	
	sleep 5
	print "v1" "Finalizing, please wait..."
	
	installGrub
	
	mountUSB
	mkdir -p "$partitionDataPath/bootableusb/linux"
	mkdir -p "$partitionDataPath/bootableusb/persistent"
	umountUSB
}

# Diski biçimlendirir.
function format() {	
	# Kullanıcıdan veri silinmesini kabul ettiğine dair onay alalım.
	if [[ $verbose != 0 ]] ; then
		print "WARNING: ALL DATA ON DEVICE '%s' WILL BE DESTROYED. \nAre you sure you want to continue? (y/n)" "${device}"
		read -n 1 -r
		print " "
		ch=$(gettext -s -e "WARNING: ALL DATA ON DEVICE '%s' WILL BE DESTROYED. \nAre you sure you want to continue? (y/n)" | grep "\(\K([^/]+)" -oP)
		if [[ ! $REPLY == "$ch" ]] ; then
			exit 1
		fi
	fi
	# Biçimlendirilecek aygıt üzerinde 
	# bağlı olan bölümlerin bağı kaldırılıyor.
	mountedParts=($(mount | grep "${device}" | cut -d' ' -f1))
	for part in "${mountedParts[@]}" ; do
		umount "${part}" >& /dev/null
		returnCodes=$?
		if [[ $returnCodes != 0 ]] ; then
			printE "Error: the device is in use by another process. \nPlease close any other process that may be accessing the device. \nError Code: %s" "${returnCodes}"
			exit 1
		fi
	done

	dd if=/dev/zero "of=$device" bs=4M count=1
	sync

	if [[ $scheme == "mbr" ]] ; then
		formatMBR
	elif [[ $scheme == "gpt" ]] ; then
		formatGPT
	elif [[ $scheme == "hybrid" ]] ; then
		formatHybrid
	fi
}

function formatMBR() {
	parted -s "$device" mklabel msdos
	parted -s "$device" mkpart primary fat32 4 50
	parted -s "$device" mkpart primary ntfs 50 -- -1s
	blockdev --rereadpt "$device" || true
	partprobe "$device"
	sleep 3
	# EFI bölümünü fat32 olarak biçimlendirelim.
	mkfs.vfat -F 32 "${device}1" >& /dev/null
	# Veri bölümünü ntfs olarak biçimlendirelim.
	mkfs.ntfs --quick "${device}2" >& /dev/null
}

function formatGPT() {
	# Tüm bölümleri silelim.
	sgdisk --zap-all "$device" >& /dev/null
	# 50M boyutunda EFI için bölüm oluşturalım.
	sgdisk --new 1::+50M --typecode 1:ef00 --change-name 1:"EFI System Partition" "$device" >& /dev/null
	# Geri kalan alana da normal kullanım için bölüm atayalım.
	sgdisk --new 2::: --typecode 2:0C01 --change-name 2:"BOOTABLEUSB" "$device" >& /dev/null
	# Aygıttaki tüm bölümleri ayıralım.
	umount --force ${device}* 2>/dev/null || true
	# EFI bölümünü fat32 olarak biçimlendirelim.
	mkfs.vfat -F 32 "${device}1" >& /dev/null
	# Veri bölümünü ntfs olarak biçimlendirelim.
	mkfs.ntfs --quick "${device}2" >& /dev/null
	# Aygıttaki tüm bölümleri ayıralım.
	umount --force ${device}* 2>/dev/null || true
}

function formatHybrid() {
	# Tüm bölümleri silelim.
	sgdisk --zap-all "$device" >& /dev/null
	# 1M boyutunda bios başlatma bölümü oluşturalım.
	sgdisk --new 1::+4M --typecode 1:ef02 --change-name 1:"BIOS Boot Partition" "$device" >& /dev/null
	# 50M boyutunda EFI için bölüm oluşturalım.
	sgdisk --new 2::+50M --typecode 2:ef00 --change-name 2:"EFI System Partition" "$device" >& /dev/null
	# Geri kalan alana da normal kullanım için bölüm atayalım.
	sgdisk --new 3::: --typecode 3:0C01 --change-name 3:"BOOTABLEUSB" "$device" >& /dev/null
	# Aygıttaki tüm bölümleri ayıralım.
	umount --force ${device}* 2>/dev/null || true
	# GPT ve MBR bölümleme tablolarının beraber kullanımını ayarlayalım.
	sgdisk --hybrid 1:2:3 "$device" >& /dev/null
	# Grubun olacağı bölümü başlatılabilir olarak işaretleyelim.
	sgdisk --attributes 2:set:2 "$device" >& /dev/null
	# Aygıttaki tüm bölümleri ayıralım.
	umount --force ${device}* 2>/dev/null || true
	# İlk bölümü sıfırlarla doldurarak biçimlendirelim.
	dd if=/dev/zero of=${device}1 bs=4M count=1 >& /dev/null
	# EFI bölümünü fat32 olarak biçimlendirelim.
	mkfs.vfat -F 32 "${device}2" >& /dev/null
	# Veri bölümünü ntfs olarak biçimlendirelim.
	mkfs.ntfs --quick "${device}3" >& /dev/null
	# Aygıttaki tüm bölümleri ayıralım.
	umount --force ${device}* 2>/dev/null || true
}

# Grubu yükler.
function installGrub() {
	mountUSB

	if [[ $systemType != "uefi" ]] ; then
		grub-install --target=i386-pc --boot-directory="$partitionGrubPath/bootableusb" "$device" >& /dev/null
	fi

	if [[ $systemType != "bios" ]] ; then
		grub-install --target=x86_64-efi --efi-directory="$partitionGrubPath" --boot-directory="$partitionGrubPath/bootableusb" --removable >& /dev/null
	fi

	mkdir -p "$(dirname "${cfgPath}")"
	writeGrubCfg

	umountUSB
}

# Grub ayarlarını günceller.
function updateGrub() {
	mountUSB
	writeGrubCfg
	umountUSB
}

function persistent() {
	tmpdir=$(mktemp -d)
	echo $1
	dd if=/dev/zero of=$tmpdir/casper-rw bs=1M count=$1
	sync
	mkfs.ext4 -F $tmpdir/casper-rw
	mountUSB
	tar -czf "$partitionDataPath/bootableusb/persistent/$1.tar.gz" -C $tmpdir casper-rw
	sync
	rm -r "$tmpdir"
	umountUSB
}

function resizePersistent() {
	mountUSB
	e2fsck -fy "$partitionDataPath/bootableusb/persistent/casper-rw"
	dd if=/dev/zero bs=1M count=$1 >> "$partitionDataPath/bootableusb/persistent/casper-rw"
	sync
	e2fsck -fy "$partitionDataPath/bootableusb/persistent/casper-rw"
	resize2fs "$partitionDataPath/bootableusb/persistent/casper-rw"
	umountUSB
}

# Kalıp dosyasını usb belleğin içine açar.
function extract() {
	isoMountPath="/media/bootableusb_iso_$(date +%s)_$$"
	mkdir -p "$isoMountPath"
	if [ -f "$isoPath" ]; then
		mount -o loop,ro -t udf,iso9660 "$isoPath" "$isoMountPath"
	else
		mount -o ro "$isoPath" "$isoMountPath"
	fi

	mountUSB

	freeSpace=$(df --block-size 1 "$partitionDataPath" | grep "$partitionData" | awk '{print $4}')
	neededSpace=$(du -s "$isoMountPath" --bytes | awk '{print $1}')
	((neededSpace = neededSpace + 1000 * 1000 * 10))

	if [[ "$neededSpace" -gt "$freeSpace" ]]; then
		printE "Hata: Bellek üzerinde yeteri kadar boş alan yok."
		umount $isoMountPath
		exit 1
	fi

	print "Copying files..."
	rsync -rlt --info=progress2 "$isoMountPath"/* "$partitionDataPath"/
	sync
	umount $isoMountPath
	umountUSB
}

# Diskteki grubu onarır.
function repairGrub() {
	grub-install $device
	print "Finalizing, please wait..."
	sleep 2
	update-grub
}

# Verilen parametrelere göre çalışma hazırlığını yapar.
function main() {
	while [ ! "$#" -eq 0 ]; do
		case "$1" in
			'--help'|'-h')
				displayHelp
				exit 0;;
			'--version'|'-v')
				displayVersion
				exit 0;;
			'--listDevices'|'-l')
				displayDevices
				exit 0;;
			'--verbose')
				verbose=2;;
			'--silent')
				verbose=0;;
			'--scheme')
				shift
				scheme=$1;;
			'--type')
				shift
				systemType=$1;;
			'--install'|'-i')
				method='prepare'
				shift
				device=$(readlink -f "$1");;
			'--format')
				method='format'
				shift
				device=$(readlink -f "$1");;
			'--installGrub')
				method='installGrub'
				shift
				device=$(readlink -f "$1");;
			'--persistent'|'-p')
				method='persistent'
				shift
				size=$1
				shift
				device=$(readlink -f "$1");;
			'--resizePersistent'|'-pr')
				method='resizePersistent'
				shift
				size=$1
				shift
				device=$(readlink -f "$1");;
			'--extract'|'-e')
				method='extract'
				shift
				isoPath=$(readlink -f "$1")
				shift
				device=$(readlink -f "$1");;
			'--updateGrub'|'-u')
				method='updateGrub'
				shift
				device=$(readlink -f "$1");;
			'--repairGrub'|'-r')
				method='repairGrub'
				shift
				device=$(readlink -f "$1");;
			* )
				printE "Error: unknown option - '%s'" "$1"
				exit 1;;
		esac

		shift
	done

	# Aygıt yoksa yazılım sonlandırılır.
	if [[ "${device}" == "" ]]; then
		displayHelp
		exit 1
	elif [[ $(lsblk -d -p -o MODEL,SIZE,NAME | grep "${device}") == "" ]]; then
		print "Error: '%s' device not found." "${device}"
		exit 1
	fi

	# Yönetici yetkileriyle çalışmıyorsa yazılım sonlandırılır.
	if [[ $(id -u) != 0 ]]; then
		printE "Error: you should run this script as root!"
		exit 1
	fi

	case "$method" in
		'prepare')
			prepare
			;;
		'format')
			format
			;;
		'installGrub')
			installGrub
			;;
		'persistent')
			persistent $size
			;;
		'resizePersistent')
			resizePersistent $size
			;;
		'extract')
			extract
			;;
		'updateGrub')
			updateGrub
			;;
		'repairGrub')
			repairGrub
			;;
		* )
			print "Error: no install method specified!"
			displayHelp
			exit 1;;
	esac
}

# =================================================================
# 					Yardımcı Fonksiyonlar
# =================================================================

function print_i18n() {
	temp=$(gettext -e -s "$1")
	printf "${temp}\n" "$2" $3 $4
}
function print() {
	if [[ ("$1" != 'v0' && "$1" != 'v1' && "$1" != 'v2') ]]; then
		print_i18n "$1" "$2" "$3" "$4"
	elif [[ ("$1" == 'v0') || 
				("$1" == 'v1' && $verbose != 0) || 
				("$1" == 'v2' && $verbose == 2) ]]; then
		print_i18n "$2" "$3" "$4"
	fi
}
function printV() {
	if [[ $verbose != 0 ]]; then
		echo -en "\033[0;33m"
	fi
	print "$1" "$2" "$3" "$4"
	if [[ $verbose != 0 ]]; then
		tput sgr0
	fi
}
function printE() {
	if [[ $verbose != 0 ]]; then
		echo -en "\033[0;31m"
	fi
	print "$1" "$2" "$3" "$4"
	if [[ $verbose != 0 ]]; then
		tput sgr0
	fi
}
function printS() {
	if [[ $verbose != 0 ]]; then
		echo -en "\033[0;32m"
	fi
	print "$1" "$2" "$3" "$4"
	if [[ $verbose != 0 ]]; then
		tput sgr0
	fi
}

function writeGrubCfg() {
	uuid=$(blkid -o value -s UUID "$partitionData")
	param=""
	echo "
insmod fat
search --no-floppy --fs-uuid $uuid --set root

function load_video {
  if [ x\$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ x\$feature_default_font_path = xy ] ; then
   font=unicode
else
   font=\"/bootableusb/grub/fonts/unicode.pf2\"
fi

if loadfont \$font ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
fi
terminal_output gfxterm

if [ -s /bootmgr ]; then
	menuentry \"$(gettext -s 'Install Windows')\" {
		ntldr /bootmgr
		boot
	}
fi
submenu \"$(gettext -s 'Boot Linux ISO Image')\" {
	insmod regexp
	insmod part_msdos

	for i in /bootableusb/linux/*.iso ; do
		regexp -s w '^/bootableusb/linux/(.*).iso' \$i 
		menuentry \"\$w\" \$i {
			set isofile=\"\$2\"
			loopback loop \$isofile

			# Ubuntu 64 Bit
			if [ -s (loop)/casper/vmlinuz.efi ]; then
				if [ -s /bootableusb/persistent/casper-rw ]; then
					set opt=\"persistent persistent-path=/bootableusb/persistent\"
				fi
				linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=\$isofile quiet splash noprompt noeject \$opt $param
				initrd (loop)/casper/initrd.lz 
			# Ubuntu 32 Bit
			elif [ -s (loop)/casper/vmlinuz ]; then
				if [ -s /bootableusb/persistent/casper-rw ]; then
					set opt=\"persistent persistent-path=/bootableusb/persistent\"
				fi
				linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile quiet splash noprompt noeject \$opt $param
				initrd (loop)/casper/initrd.lz
			# Tails
			elif [ -s (loop)/live/vmlinuz2 ]; then
				linux (loop)/live/vmlinuz2 boot=live config findiso=\${isofile} live-media=removable apparmor=1 security=apparmor nopersistent noprompt timezone=Etc/UTC block.events_dfl_poll_msecs=1000 noautologin module=Tails $param
		    	initrd (loop)/live/initrd2.img
		    # Kali Linux
			elif [ -s (loop)/dists/kali-rolling/Release ]; then
				linux (loop)/live/vmlinuz boot=live findiso=\$isofile noconfig=sudo username=root hostname=kali $param
				initrd (loop)/live/initrd.img
			# Gparted
			elif [ -s (loop)/GParted-Live-Version ]; then
				linux (loop)/live/vmlinuz boot=live union=overlay username=user config components quiet noswap noeject toram=filesystem.squashfs ip=  nosplash findiso=\$isofile $param
				initrd (loop)/live/initrd.img
		    # Debian
			elif [ -s (loop)/live/vmlinuz ]; then
				linux (loop)/live/vmlinuz boot=live config findiso=\$isofile $param
				initrd (loop)/live/initrd.img
			# Fedora
			elif [ -s (loop)/isolinux/vmlinuz ]; then
				probe -l loop --set=isolabel
				linux (loop)/isolinux/vmlinuz root=live:CDLABEL=\$isolabel iso-scan/filename=\$isofile rd.live.image quiet $param
				initrd (loop)/isolinux/initrd.img
			# Gentoo
			elif [ -s (loop)/isolinux/gentoo ]; then
				linux (loop)/isolinux/gentoo root=/dev/ram0 init=/linuxrc aufs looptype=squashfs loop=/image.squashfs cdroot isoboot=\$isofile vga=791 splash=silent,theme:default console=tty0 $param
				initrd (loop)/isolinux/gentoo.xz
			# Manjaro 64 Bit
			elif [ -s (loop)/manjaro/isomounts ]; then
				set imgdevpath=\"/dev/disk/by-uuid/$uuid\"
				probe -l loop --set=isolabel
				linux (loop)/manjaro/boot/x86_64/manjaro img_dev=\$imgdevpath img_loop=\$isofile misobasedir=manjaro misolabel=\$isolabel nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=nonfree nonfree=yes quiet splash $param
				initrd (loop)/manjaro/boot/intel_ucode.img (loop)/manjaro/boot/x86_64/manjaro.img
			# Arch Linux 64 Bit
			elif [ -s (loop)/arch/boot/x86_64/vmlinuz ]; then
				set imgdevpath=\"/dev/disk/by-uuid/$uuid\"
				probe -l loop --set=isolabel
				linux (loop)/arch/boot/x86_64/vmlinuz img_dev=\$imgdevpath img_loop=\$isofile archisolabel=\$isolabel $param
				initrd (loop)/arch/boot/x86_64/archiso.img
			# OpenSuse
			elif [ -s (loop)/boot/x86_64/loader/linux ]; then
				set imgdevpath=\"/dev/disk/by-uuid/$uuid\"
				linux (loop)/boot/x86_64/loader/linux isofrom_device=\$imgdevpath isofrom_system=\$isofile LANG=en_US.UTF-8 $param
				initrd (loop)/boot/x86_64/loader/initrd
			# Remix OS
			elif [ -s (loop)/isolinux/remixos.png ]; then
				linux (loop)/kernel iso-scan/filename=\$isofile androidboot.selinux=permissive quiet SERIAL=random logo.showlogo=1 SRC= DATA= DATA_IN_MEM=1 $param
				initrd (loop)/initrd.img
			fi
		}
	done
}

menuentry \"$(gettext -s 'Operating Systems on Disk')\" {
	insmod regexp
	insmod part_msdos
	for x in (hd1,*) ; do
		if [ -f \"\$x/boot/grub/grub.cfg\" ] ; then
			configfile \$x/boot/grub/grub.cfg
			break
		fi
	done
}

menuentry \"$(gettext -s 'Reboot')\" {
	reboot
}
" > "$cfgPath" 
}

# /dev/sdX biçiminde belirtilen aygıtı sisteme bağlar.
function mountUSB() {
	# Cihaz üzerindeki tüm bölümleri okuyup dizi olarak tanımlıyoruz.
	partition2=($(ls --color=no -1 "${device}"*))

	# Dizinin uzunluğu 3 den küçükse sorun var demektir. (/dev/sdc /dev/sdc1)
	if [[ ${#partition2[@]} < 3 ]] ; then
		printE "Error: this drive contains multiple partitions!"
		exit 1
	fi

	# Dizideki son eleman bizim aradığımız bölüm
	partitionData=${partition2[-1]}
	# Dizideki sondan ikinci eleman bizim aradığımız bölüm
	partitionGrub=${partition2[-2]}

	# Eğer bağlıysa bağlandığı noktayı öğreniyoruz.
	# Bağlı değilse belirlediğimiz noktaya bağlıyoruz.
	temp=($(mount | grep "$partitionData"))
	if [[ "${temp}" == "" ]] ; then
		partitionDataPath="/media/bootableusb_$(date +%s)_$$"
		mkdir -p "$partitionDataPath"
		mount "$partitionData" "$partitionDataPath"
		# Yazılım aracılığıyla bağladığımız için işlemlerin 
		# sonucunda bağı kaldırmamız gerekiyor.
		mountCondD="1"
	else
		partitionDataPath="${temp[2]}"
		mountCondD="0"
	fi

	temp2=($(mount | grep "$partitionGrub"))
	if [[ "${temp2}" == "" ]] ; then
		partitionGrubPath="/media/bootableusb_2$(date +%s)_$$"
		mkdir -p "$partitionGrubPath"
		mount "$partitionGrub" "$partitionGrubPath"
		# Yazılım aracılığıyla bağladığımız için işlemlerin 
		# sonucunda bağı kaldırmamız gerekiyor.
		mountCondG="1"
	else
		partitionGrubPath="${temp2[2]}"
		mountCondG="0"
	fi

	# Grub yapılandırma dosyasının bulunduğu konumu değişkene atıyoruz.
	cfgPath="$partitionGrubPath/bootableusb/grub/grub.cfg" 
}

function umountUSB() {
	sync

	if [[ "$mountCondD" == "1" ]] ; then
		umount "${partitionDataPath}" >& /dev/null
		returnCodes=$?
		if [[ $returnCodes != 0 ]] ; then
			printE "Error: unable to securely unmount %s" "${partitionDataPath}"
		else
			sleep 1
			rmdir "${partitionDataPath}"
		fi
	fi

	if [[ "$mountCondG" == "1" ]] ; then
		umount "${partitionGrubPath}" >& /dev/null
		returnCodes=$?
		if [[ $returnCodes != 0 ]] ; then
			printE "Error: unable to securely unmount %s" "${partitionGrubPath}"
		else
			sleep 1
			rmdir "${partitionGrubPath}"
		fi
	fi
}

# =================================================================
# 					Bilgi Fonksiyonları
# =================================================================

# Yardım sayfasını içerir.
function displayHelp() {
	if [[ "$(dirname $(readlink -f $0) | grep '/usr/bin')" != "" ]]; then
		temp=$(man bootableusb)
	else
		temp=$(man "../man/bootableusb.1.tr")
	fi
	echo "$temp"
}

# Yazılım sürümünü yazdırır.
function displayVersion() {
	printf "bootableusb v0.5 \n"
}

# Bilgisayara bağlı aygıtları listeler.
function displayDevices() {
	print "v1" "==========================================="
	printS "v1" "All Storage Devices"
	allDevices=$(lsblk -d -p -o MODEL,SIZE,NAME | grep "/dev/sd")
	printf "${allDevices} \n"
	print "v1" "==========================================="
}

# Snap paketleme sistemi için hazırlık
if [[ "$SNAP" != "" ]] ; then
	export LOCPATH=$SNAP/usr/lib/locale
	export MANPATH=$SNAP/usr/share/man
	export GROFF_FONT_PATH=$SNAP/usr/share/groff/1.22.3/font
	export GROFF_TMAC_PATH=$SNAP/usr/share/groff/1.22.3/tmac
	export TEXTDOMAINDIR=$SNAP/usr/share/locale
fi
	export TEXTDOMAIN=bootableusb

isoPath=''
method=''
device=''
verbose=1
size=0
systemType='bios' #bios, uefi, all
scheme='mbr' #mbr, gpt, hybrid

main $1 $2 $3 $4 $5 $6