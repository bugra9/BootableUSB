#!/bin/bash

# =================================================================
# BootableUSB v0.3
# 
# @link https://github.com/bugra9/BootableUSB
# @author bugra9 https://github.com/bugra9
# @contributors https://github.com/bugra9/BootableUSB/graphs/contributors
# @license GPLv3
# =================================================================

# =================================================================
# 					Bilgi Veren Sayfalar
# =================================================================

# Yardım sayfasını içerir.
function displayHelp() {
	if [[ "$(dirname $(readlink -f $0))" == "/usr/bin" ]]; then
		temp=$(man bootableusb)
	else
		temp=$(man "../man/bootableusb.1.tr")
	fi
	echo "$temp"
}

# Yazılım sürümünü yazdırır.
function displayVersion() {
	printf "bootableusb v0.3"
}

# Bilgisayara bağlı aygıtları listeler.
function displayDevices() {
	print "==========================================="
	print "All Storage Devices"
	allDevices=$(lsblk -d -p -o MODEL,SIZE,NAME | grep "/dev/sd")
	print "${allDevices}"
	print "==========================================="
}

# =================================================================
# 					Yardımcı Fonksiyonlar
# =================================================================


function print_i18n() {
	temp=$(gettext -e -s "$1")
	printf "${temp}\n" "$2" $3 $4
}
function print() {
	print_i18n "$1" "$2" "$3" "$4"
}
function printV() {
	echo -en "\033[0;33m"
	print_i18n "$1" "$2" "$3" "$4"
	tput sgr0
}
function printE() {
	echo -en "\033[0;31m"
	print_i18n "$1" "$2" "$3" "$4"
	tput sgr0
}
function printS() {
	echo -en "\033[0;32m"
	print_i18n "$1" "$2" "$3" "$4"
	tput sgr0
}

# Fat32 türünde biçimlendirecek yazılım aranır. Yoksa hata iletisi gösterilip çıkış yapılır.
function checkDependencies() {
	if [[ "$1" == 'mkdosfs' ]]; then
		mkdosfs=''
		if which 'mkdosfs' > /dev/null; then
			mkdosfs='mkdosfs'
		elif which 'make.msdos' > /dev/null; then
			mkdosfs='mkfs.msdos'
		else
			printE "Error: mkdosfs or mkfs.msdos program not found!"
			exit 1
		fi
	fi
}

# Grub ayarlarını içerir ve bu ayarları /grub/grub.cfg dosyasına yazar.
function writeGrubCfg() {
	uuid=$(blkid -o value -s UUID "$partition")
	echo "
insmod fat
search --no-floppy --fs-uuid $uuid --set root

if [ -s /grub/grubenv ]; then
  set have_grubenv=true
  load_env
fi
function recordfail {
  set recordfail=1
  if [ -n \"\${have_grubenv}\" ]; then if [ -z \"\${boot_once}\" ]; then save_env recordfail; fi; fi
}
function load_video {
  if [ x\$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ x\$feature_default_font_path = xy ] ; then
   font=unicode
else
   font=\"/grub/fonts/unicode.pf2\"
fi

if loadfont \$font ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=/grub/locale
  set lang=tr_TR
  insmod gettext
fi
terminal_output gfxterm

menuentry \"$(gettext -s 'Install Windows')\" {
	ntldr /bootmgr
	boot
}
submenu \"$(gettext -s 'Boot Linux ISO Image')\" {
	menuentry \"GParted\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/live/vmlinuz boot=live union=overlay username=user config components quiet noswap noeject toram=filesystem.squashfs ip=  nosplash findiso=\$isofile
		initrd (loop)/live/initrd.img
	}
	menuentry \"SystemRescueCD\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/isolinux/rescue64 isoloop=\$isofile
		initrd (loop)/isolinux/initram.igz
	}
	menuentry \"Ubuntu 64 Bit\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=\$isofile quiet splash noprompt noeject
		initrd (loop)/casper/initrd.lz
	}
	menuentry \"Ubuntu 64 Bit - $(gettext -s 'Run from RAM')\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=\$isofile quiet splash noprompt noeject toram
		initrd (loop)/casper/initrd.lz
	}
	menuentry \"Ubuntu 32 Bit\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile quiet splash noprompt noeject
		initrd (loop)/casper/initrd.lz
	}
	menuentry \"Arch Linux\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/arch/boot/x86_64/vmlinuz archisodevice=/dev/loop0 img_dev=\$imgdevpath img_loop=\$isofile earlymodules=loop
		initrd (loop)/arch/boot/x86_64/archiso.img
	}
	menuentry \"Debian\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/live/vmlinuz boot=live config fromiso=/dev/sdb2/\$isofile
		initrd (loop)/live/initrd.img
	}
	menuentry \"Elementary OS\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile
		initrd (loop)/casper/initrd.lz
	}
	menuentry \"Fedora\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/isolinux/vmlinuz root=live:CDLABEL=Fedora-WS-Live-24-1-2 iso-scan/filename=\$isofile rd.live.image quiet
		initrd (loop)/isolinux/initrd.img
	}
	menuentry \"Gentoo\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/isolinux/gentoo root=/dev/ram0 init=/linuxrc aufs looptype=squashfs loop=/image.squashfs cdroot isoboot=\$isofile vga=791 splash=silent,theme:default console=tty0
		initrd (loop)/isolinux/gentoo.xz 
	}
	menuentry \"Kali Linux\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/live/vmlinuz boot=live findiso=\$isofile noconfig=sudo username=root hostname=kali
		initrd (loop)/live/initrd.img
	}
	menuentry \"Linux Mint\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile noeject noprompt 
		initrd (loop)/casper/initrd.lz
	}
	menuentry \"OpenSUSE $(gettext -s 'Live')\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		set imgdevpath=\"/dev/disk/by-uuid/$uuid\"
		linux (loop)/boot/x86_64/loader/linux isofrom_device=\$imgdevpath isofrom_system=\$isofile LANG=en_US.UTF-8
		initrd (loop)/boot/x86_64/loader/initrd
	}
	menuentry \"OpenSUSE $(gettext -s 'Setup')\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/boot/x86_64/loader/linux install=hd:\$isofile
		initrd (loop)/boot/x86_64/loader/initrd
	}
	menuentry \"Tails\" {
		set isofile=\"/linux.iso\"
		loopback loop \$isofile
		linux (loop)/live/vmlinuz2 boot=live config findiso=\${isofile} live-media=removable apparmor=1 security=apparmor nopersistent noprompt timezone=Etc/UTC block.events_dfl_poll_msecs=1000 noautologin module=Tails
    	initrd (loop)/live/initrd2.img
	}
}
" > "$cfgPath" 
	awk '/### BEGIN \/etc\/grub.d\/10_linux ###/,/### END \/etc\/grub.d\/10_linux ###/' /boot/grub/grub.cfg >> "$cfgPath"
}

# /dev/sdX biçiminde belirtilen aygıtı sisteme bağlar.
function mountUSB() {
	# Cihaz üzerindeki tüm bölümleri okuyup dizi olarak tanımlıyoruz.
	partition=($(ls --color=no -1 "${device}"*))

	# Dizinin uzunluğu 2 değilse sorun var demektir. (/dev/sdc /dev/sdc1)
	if [[ ${#partition[@]} != 2 ]] ; then
		printE "Error: this drive contains multiple partitions!"
		exit 1
	fi

	# Dizideki son eleman bizim aradığımız bölüm
	partition=${partition[-1]}

	# Eğer bağlıysa bağlandığı noktayı öğreniyoruz.
	# Bağlı değilse belirlediğimiz noktaya bağlıyoruz.
	temp=($(mount | grep "$partition"))
	if [[ "${temp}" == "" ]] ; then
		partitionPath="/media/bootableusb_$(date +%s)_$$"
		mkdir -p "$partitionPath"
		mount "$partition" "$partitionPath"
		# Yazılım aracılığıyla bağladığımız için işlemlerin 
		# sonucunda bağı kaldırmamız gerekiyor.
		mountCond="1"
	else
		partitionPath="${temp[2]}"
		mountCond="0"
	fi

	# Grub yapılandırma dosyasının bulunduğu konumu değişkene atıyoruz.
	cfgPath="$partitionPath/grub/grub.cfg" 
}

function umountUSB() {
	sync

	if [[ "$mountCond" == "1" ]] ; then
		umount "${partitionPath}" >& /dev/null
		returnCodes=$?
		if [[ $returnCodes != 0 ]] ; then
			printE "Error: unable to securely unmount %s" "${partitionPath}"
		else
			rmdir "${partitionPath}"
		fi
	fi
}

# =================================================================
# 					İşlemler
# =================================================================

# Diski biçimlendirip grubu yükler.
function prepare() {
	format
	sleep 5
	print "Finalizing, please wait..."
	installGrub
}

# Diski biçimlendirir.
function format() {	
	# Kullanıcıdan veri silinmesini kabul ettiğine dair onay alalım.
	print "WARNING: ALL DATA ON DEVICE '%s' WILL BE DESTROYED. \nAre you sure you want to continue? (y/n)" "${device}"
	read -n 1 -r
	print ""
	if [[ ! $REPLY =~ ^[YyEe]$ ]] ; then
		exit 1
	fi

	# Biçimlendirilecek aygıt üzerinde 
	# bağlı olan bölümlerin bağı kaldırılıyor.
	mountedParts=($(mount | grep "${device}" | cut -d' ' -f1))
	for part in "${mountedParts[@]}" ; do
		umount "${part}" >& /dev/null
		returnCodes=$?
		if [[ $returnCodes != 0 ]] ; then
			printE "Error: the device is in use by another process.\nPlease close any other process that may be accessing the device.\nError Code: %s" "${returnCodes}"
			exit 1
		fi
	done

	checkDependencies mkdosfs
	parted -s "$device" mklabel msdos
	parted -s "$device" mkpart primary fat32 4MiB -- -1s
	blockdev --rereadpt "$device" || true
	partprobe "$device"
	sleep 3
	partition=`ls --color=no -1 "$device"* | grep -ve "$device"'$'`
	"$mkdosfs" -F 32 -n 'BOOTABLEUSB' "$partition" >& /dev/null
}

# Grubu yükler.
function installGrub() {
	mountUSB

	grub-install --target=i386-pc --boot-directory="$partitionPath" "$device" >& /dev/null

	mkdir -p "$(dirname "${cfgPath}")"
	writeGrubCfg

	umountUSB
}

# Grub ayarlarını günceller.
function updateGrub() {
	mountUSB
	writeGrubCfg
	umountUSB
}

# Kalıp dosyasını usb belleğin içine açar.
function extract() {
	isoMountPath="/media/bootableusb_iso_$(date +%s)_$$"
	mkdir -p "$isoMountPath"
	if [ -f "$isoPath" ]; then
		mount -o loop,ro -t udf,iso9660 "$isoPath" "$isoMountPath"
	else
		mount -o ro "$isoPath" "$isoMountPath"
	fi

	mountUSB

	freeSpace=$(df --block-size 1 "$partitionPath" | grep "$partition" | awk '{print $4}')
	neededSpace=$(du -s "$isoMountPath" --bytes | awk '{print $1}')
	((neededSpace = neededSpace + 1000 * 1000 * 10))

	if [[ "$neededSpace" -gt "$freeSpace" ]]; then
		printE "Hata: Bellek üzerinde yeteri kadar boş alan yok."
		umount $isoMountPath
		exit 1
	fi

	print "Copying files..."
	rsync -rlt --info=progress2 "$isoMountPath"/* "$partitionPath"/
	sync

	umount $isoMountPath
	umountUSB
	
}

# Diskteki grubu onarır.
function repairGrub() {
	grub-install $device
	print "Finalizing, please wait..."
	sleep 2
	update-grub
}

# Verilen parametrelere göre çalışma hazırlığını yapar.
function main() {
	while [ ! "$#" -eq 0 ]; do
		case "$1" in
			'--help'|'-h')
				displayHelp
				exit 0;;
			'--version')
				displayVersion
				exit 0;;
			'--listDevices'|'-l')
				displayDevices
				exit 0;;
			'--verbose'|'-v')
				verbose='1';;
			'--prepare')
				method='prepare'
				shift
				device=$(readlink -f "$1");;
			'--format')
				method='format'
				shift
				device=$(readlink -f "$1");;
			'--installGrub')
				method='installGrub'
				shift
				device=$(readlink -f "$1");;
			'--extract')
				method='extract'
				shift
				isoPath=$(readlink -f "$1")
				shift
				device=$(readlink -f "$1");;
			'--updateGrub')
				method='updateGrub'
				shift
				device=$(readlink -f "$1");;
			'--repairGrub')
				method='repairGrub'
				shift
				device=$(readlink -f "$1");;
			* )
				printE "Error: unknown option - '%s'" "$1"
				exit 1;;
		esac

		shift
	done

	# Aygıt yoksa yazılım sonlandırılır.
	if [[ "${device}" == "" ]]; then
		displayHelp
		exit 1
	elif [[ $(lsblk -d -p -o MODEL,SIZE,NAME | grep "${device}") == "" ]]; then
		print "Error: '%s' device not found." "${device}"
		exit 1
	fi

	# Yönetici yetkileriyle çalışmıyorsa yazılım sonlandırılır.
	if [[ $(id -u) != 0 ]]; then
		printE "Error: you should run this script as root!"
		exit 1
	fi

	case "$method" in
		'prepare')
			prepare
			;;
		'format')
			format
			;;
		'installGrub')
			installGrub
			;;
		'extract')
			extract
			;;
		'updateGrub')
			updateGrub
			;;
		'repairGrub')
			repairGrub
			;;
		* )
			print "Error: no install method specified!"
			displayHelp
			exit 1;;
	esac
}

export TEXTDOMAIN=bootableusb

isoPath=''
method=''
device=''
verbose='0'

main $1 $2 $3 $4 $5 $6